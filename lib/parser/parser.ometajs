var Message = require('../message');
var Symbol  = require('../symbol');
var Args    = require('../args');

ometa LokeParser {
	program = messageChain?:mc -> mc || [],

	messageChain = expression:e seperator+ messageChain:m -> [ e ].concat(m)
	             | expression:e terminator:t seperator* messageChain:m -> [ e, t ].concat(m)
	             | terminator:t seperator* messageChain:m -> [ t ].concat(m)
	             | expression:e -> [ e ],

	expression = assoc | message | brackets,

	literal = text | int | decimal,

	message = identifier:id openParen commated:args closeParen -> new Message(id, args)
	        | identifier:id -> new Message(id, new Args())
	        | literal:id openParen commated:args closeParen -> new Message(id, args)
	        | literal:id -> new Message(id, new Args()),

	commated = keywordArg:ka whitespace* comma whitespace* commated:c -> new Args().set(ka).concat(c)
	         | keywordArg:ka -> new Args().set(ka)
	         | messageChain:mc whitespace* comma whitespace* commated:c -> new Args([ mc ]).concat(c)
	         | messageChain:mc -> new Args([ mc ])
	         | -> new Args(),

	brackets = openSquare whitespace* commated:args whitespace* closeSquare -> new Message(new Symbol('[]'), args)
	         | openCurly whitespace* commated:args whitespace* closeCurly -> new Message(new Symbol('{}'), args),

	keywordArg = identifier:id whitespace* colon whitespace* expression:e -> [ id, e ],

	assoc = expression:k whitespace* hashrocket whitespace* expression:e -> [ k, e ],

	whitespace = newline | seperator,

	identifier = token(`Identifier):id -> new Symbol(id),

	seperator = token(`Seperator),

	newline = token(`Newline),

	openParen = token("("),
	closeParen = token(")"),

	openCurly = token("{"),
	closeCurly = token("}"),

	openSquare = token("["),
	closeSquare = token("]"),

	comma = token(","),

	hashrocket = token("=>"),

	colon = token(":"),

	text = token(`Text):txt -> txt,

	decimal = token(`Decimal):n -> parseFloat(n),

	int = token(`Int):n -> parseInt(n),

	terminator = (token(`Terminator) | newline) -> new Message('.', new Args)
}

LokeParser.prototype.token = function() {
	var current = this._current();

	if(Array.isArray(current) && current.length == 2)
		return this._skip();

	return false;
};